global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin group prometheus
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Maxconn
        maxconn 4096

        # CPU affinity
        nbthread 2

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http
{% for rule in forwarding_rules %}

frontend entry_{{ rule.entry_protocol }}_{{ rule.entry_port }}
        mode {% if rule.entry_protocol == 'http' %}http{% else %}tcp{% endif %}

        bind {{ ipv4_public_address }}:{{ rule.entry_port }}
{% if rule.entry_protocol == 'http' %}
        option httplog
        option forwardfor
{% if redirect_to_https %}
        redirect scheme https code 301 if !{ ssl_fc }
{% endif %}
{% else %}
        option tcplog
{% endif %}
        default_backend target_{{ rule.target_protocol }}_{{ rule.target_port }}

backend target_{{ rule.target_protocol }}_{{ rule.target_port }}
        mode {% if rule.target_protocol == 'http' %}http{% else %}tcp{% endif %}

        balance roundrobin
        timeout check {{ health.check_timeout_seconds }}s
{% if rule.target_protocol == 'http' %}
{% if health.check_protocol == 'http' %}
        option httpchk
        http-check connect
        http-check send meth GET uri {{ health.check_path }}
        http-check expect status 200
{% endif %}
{% if sticky_sessions %}
        cookie {{ sticky_sessions.cookie_name }} insert indirect nocache maxidle {{ sticky_sessions.cookie_ttl }}
{% endif %}
{% else %}
        option tcp-check
{% endif %}
{% for v in virtances %}
        server virtance_{{ v.id }} {{ v.ipv4_address }}:{{ rule.target_port }}
{% endfor %}
        default-server inter {{ health.check_interval_seconds }}s rise {{ health.check_healthy_threshold }} fall {{ health.check_unhealthy_threshold }} port {{ health.check_port }} check
{% endfor %}
